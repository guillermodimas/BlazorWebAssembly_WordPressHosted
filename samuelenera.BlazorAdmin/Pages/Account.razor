@using samuelenera.BlazorAdmin.Services
@using samuelenera.BlazorAdmin.Models
@using System.Globalization;
@inject Microsoft.Extensions.Configuration.IConfiguration config
@inject HttpClient client
@inject IMemberpressAPIClient _memberPressAPIClient
@inject Blazored.LocalStorage.ILocalStorageService _local

@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

@page "/"
@page   "/ezer_se/blazor/"

    <ConfirmDialog @ref="ConfirmActionDialogComponent" Title="@ConfirmActionDialogTitle" Body="@ConfirmActionDialogBody" OnConfirmationSelected="ConfirmationSelected"></ConfirmDialog>

    @if (isLoading == true)
{
    <div class="sk-cube-grid">
        <div class="sk-cube sk-cube1"></div>
        <div class="sk-cube sk-cube2"></div>
        <div class="sk-cube sk-cube3"></div>
        <div class="sk-cube sk-cube4"></div>
        <div class="sk-cube sk-cube5"></div>
        <div class="sk-cube sk-cube6"></div>
        <div class="sk-cube sk-cube7"></div>
        <div class="sk-cube sk-cube8"></div>
        <div class="sk-cube sk-cube9"></div>
    </div>
}
else
{
    <div class="pricing-header px-3 py-3 pt-md-5 pb-md-4 mx-auto text-center">
        <h1 class="display-4">Welcome, @Email</h1>
        <p class="lead">Quickly build an effective pricing table for your potential customers with this Bootstrap example. It’s built with default Bootstrap components and utilities with little customization.</p>
    </div>
    if (memberPressSubscriptionInfoModels.Count == 0)
    {

    <div class="alert alert-info col-md-12 px-3" align="center">
        No Active Subscription
    </div>

    }
    else
    {

    <div class="row">
        <div class="col-md-1">

        </div>
        <div class="col-md-10">
            <table class="table table th-f">
                <thead>
                    <tr>
                        <th style="width:220px" scope="col">Name</th>
                        <th style="font-weight: normal">@Name</th>
                    </tr>
                </thead>
                <tbody>
                </tbody>
            </table>
            <table class="table table">
                <thead>
                    <tr>
                        <th style="width: 220px" scope="col">Payment Type (Gateway):</th>
                        <th style="font-weight: normal">@memberPressSubscriptionInfoModels[0].gateway</th>
                    </tr>
                </thead>
                <tbody>
                </tbody>
            </table>
            <table class="table table">
                <thead>
                    <tr>
                        <th style="width: 220px" scope="col">Status :</th>
                        <th style="font-weight: normal"><span class="badge badge-primary bg-@(memberPressSubscriptionInfoModels[0].status == "active" ? "primary" : "warning") px-2 py-2 mt-2">@memberPressSubscriptionInfoModels[0].status.ToUpperInvariant()</span></th>
                    </tr>
                </thead>
                <tbody>
                </tbody>
            </table>
        </div>
        <div class="col-md-1">

        </div>

    </div>
    <div class="row py-4">
        <div class="col-md-1">

        </div>
        <div class="col-md-10">
            <div class="card text-center mb-4 shadow-sm">
                <div class="card-header">
                    <h4 class="my-0 font-weight-normal">@memberPressSubscriptionInfoModels[0].membership.title</h4>
                </div>
                <div class="card-body">
                    <h1 class="card-title pricing-card-title">@Convert.ToDecimal(memberPressSubscriptionInfoModels[0].price).ToString("C", CultureInfo.CurrentCulture) <small class="text-muted"> / @memberPressSubscriptionInfoModels[0].period_type</small></h1>
                    <ul class="list-unstyled mt-3 mb-4">
                        @foreach (var benefit in @memberPressSubscriptionInfoModels[0].membership.pricing_benefits)
                            {
                        <li>@benefit</li>
                            }
                    </ul>
                    <Blazorise.Button Color="Color.Warning" Loading="@cancelisLoading" Clicked="@PropmptCancelSubscription" Disabled="@(memberPressSubscriptionInfoModels[0].status != "active" ? true : false)">Cancel Subscription</Blazorise.Button>
                    @*<button type="button" disabled="@(memberPressSubscriptionInfoModels[0].status != "active" ? true : false)" @onclick="@PropmptCancelSubscription" class="btn btn-lg btn-block btn-warning">Cancel Subscription</button>*@
                </div>
            </div>
        </div>
        <div class="col-md-1">

        </div>

    </div>

    <div class="row" style="padding-top: 10px">
        <div class="col col-12">

            <Alert Color="Color.Danger" Visible="@isError">
                <strong>Error: </strong> @ErrorMessage
            </Alert>

        </div>
    </div>



    }
}












    @code {

    private List<MemberPressSubscriptionInfoModel> memberPressSubscriptionInfoModels { get; set; }
    private List<MemberPressBasicUserInfoModel> results { get; set; }


    private bool isError { get; set; } = false;
    private string ErrorMessage { get; set; }
    private bool isLoading { get; set; }
    private bool cancelisLoading { get; set; }
    private string Email { get; set; }
    private string Name { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadUserSubscription();
        }
        catch(Exception ex)
        {
            isError = true;
            ErrorMessage = ex.Message;
        }


    }

    private async Task LoadUserSubscription()
    {
        isLoading = true;
        memberPressSubscriptionInfoModels = new List<MemberPressSubscriptionInfoModel>();
        Email = await _local.GetItemAsync<string>("user_email");


        results = await _memberPressAPIClient.GetMemberPressBasicUserInfoModelByEmail();
        if (results != null)
        {
            Name = results[0].first_name + ' ' + results[0].last_name;
            memberPressSubscriptionInfoModels = await _memberPressAPIClient.GetMemberPressSubcriptionsByID(results[0].id.ToString());
            if (memberPressSubscriptionInfoModels.Count == 0)
            {
                isError = true;
                ErrorMessage = "(API) Issue cancellation subscription";
            }
            else
            {
                //Plan Details
                var Plan = memberPressSubscriptionInfoModels[0].membership.title;
                var Billing = memberPressSubscriptionInfoModels[0].period_type;
                Decimal Price = Convert.ToDecimal(memberPressSubscriptionInfoModels[0].price);
            }

        }
        isLoading = false;
    }


    private void PropmptCancelSubscription()
    {
        ConfirmationCommand = "CancelSubscription";

        ConfirmActionDialogTitle = "Cancel Subscription?";
        ConfirmActionDialogBody = "Are you sure you want to cancel this subscription?";
        ConfirmActionDialogComponent.ShowModal();


    }

    private async Task CancelSubscription()
    {
        cancelisLoading = true;

        MemberPressCancelSubsciptionModel result = await _memberPressAPIClient.CancelSubsciptionModel(memberPressSubscriptionInfoModels[0].id, results[0].id.ToString(), memberPressSubscriptionInfoModels[0].membership.id.ToString());
        if (result.id == null)
        {
            //ERROR
        }
        else
        {
            //SUCCESSFUL CANCELLATION
            //REFRESH SUB DETAILS
            await LoadUserSubscription();
        }
        cancelisLoading = false;
    }


    /// <summary>
    /// ConfirmDialog Code
    /// </summary>
    private ConfirmDialog ConfirmActionDialogComponent;
    private string ConfirmActionDialogTitle { get; set; } = "";
    private string ConfirmActionDialogBody { get; set; } = "";


    private string ConfirmationCommand = "";


    private async Task ConfirmationSelected(bool selection)
    {

        if (selection)
        {
            if (ConfirmationCommand == "CancelSubscription")
            {
                await CancelSubscription();
            }
        }
    }
    }